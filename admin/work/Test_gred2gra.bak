#!/bin/sh
# the next line restarts using tclsh \
exec tclsh8.0 "$0" ${1+"$@"}

########################################################################
# fichier map : connexion au banc map via le programme kermit.
# 
########################################################################
# 
# A FAIRE :
# 
########################################################################

set map(version) 1.0

########################################################################
proc map_initGlobals {} {
global map
   set map(fileIn) "test_eg7.gra"
   set map(fileOut) "test_eg7.gred"
   

} ;# endproc map_initGlobals

########################################################################
proc map_loadPistLib {} {
  global map auto_path
  
  
  lappend auto_path ../../pist/lib
  package require pist
  Pist_PackageRequireAll

  
} ;# endproc map_loadPistLib

########################################################################
proc help:all {} {
    return "pas d'aide disponible."
} ;# endproc help:all

########################################################################
proc map_parseCommandLine {} {
   global map argv
  
  # Initialisation des valeurs d'options par défaut :
  set map(OPTION_BIDON)  0
    
  while {[llength $argv]} {
     switch -glob -- [lindex $argv 0] {
     
         --      {
            set argv [lreplace $argv 0 0]
            break
         }
                  
         -e       -
         -edit   {
            global env
            if {![info exists env(PRINTER)]} {
               set env(PRINTER) "stead"
            }
            exec $env(PRINTER) [info script] &
            exit
         }
         
         -h       -
         -help   {
            puts [help:all]
            exit
         }
         
         -*      { 
            puts [help:all]
            puts stdout "#################################"
            puts stdout "Option inconnue : [lindex $argv 0]"
            exit 1
         }
         
         default { 
            break
         }
      }
      # Il ne devrait plus rester d'arguments
      if {[llength $argv]} {
         puts [help:all]
         puts stdout "#################################"
         puts stdout "Arguments interdits : $argv"
         exit 1
      }

  }
} ;# endproc map_parseCommandLine

          
########################################################################
proc main {} {

  global env argv map
    
  if {[info tclversion] < 7.6} {
    puts stderr "\n[info script] nécessite l'utilisation\
                       de TCL version 7.6 ou ultérieure\n"
    puts stderr "Info sur la version courante : [help:version]\n"
    exit
  }

  # Charge la librairie pist
  map_initGlobals
    
  # Charge la librairie pist
  map_loadPistLib
    
  # Analyse et extraction des options et traitement des options
  # immédiates du style "-help", ...
  map_parseCommandLine
    
  parray map
  
  set graText [read_file $map(fileIn)]
  set gredText [gred2gra $graText]
} ;# endproc main

########################################################################
# graText : chaine au formet gra de eg7
# 
# retourne une chaine au format "gred"
# 
# Principe :
# 
# On expore successivemenet les trois zones etapeZone transZone et
# declarZone.
# On contruit un tableau grafcet() contenant toutes les informations
# pour les trois types d'objets de base (Etape, Trans et Link)
# ainsi que pour les informations générales (declaration)
# 
# 
# 
# 
proc gred2gra {graText} {

  array set grafcet {
     etapeUID   0
     transUID   0
     linkUID    0
     etapeList {}
     transList {}
     linkList  {}
  }
  
  ######################################################################
  # Construction de quelques patternes régulières :
  
  # set t    {[NIMBE]S}       ;# type pattern
  set et    NS|IS|MS|BS|ES  ;# etape type pattern
  set w    "\[ \t\]"         ;# white space pattern 
  set ws   "\[ \t\]+"         ;# white spaces pattern 
  set i    {[0-9]+}           ;# integer pattern (1234)
  set r    "${i}(\\\.$i)?"        ;# reel pattern (54 or 54.1234)
  set etapePat "^($et)${ws}($i)${ws}($r)${ws}($r)${ws}($i)${ws}\$"
  set transPat "^($i)${ws}($r)${ws}($r)${ws}($i)${ws}\$"
  set endEtapePat   "^##$w*\$"
  set endZonePat "^#\?$w*\$"
  set blankLinePat  "^\[ \t\]*\$"
  
  array set typeName {
    IS Initial
    NS Normal
    MS Macro
    BS MacroBegin
    ES MacroEnd
  }
  
  # On transforme le texte à analyser en une liste de lignes
  set graLines [split $graText \n]
  
  # lineIdx pointe la ligne en court d'examen
  # et thisLine est le contenu de la ligne courante
  set lineIdx -1
  set linesNumber [llength $graLines] ;# utilis plusieurs fois
  set thisLine [lindex $graLines [incr lineIdx]]

  while {$lineIdx < $linesNumber} {
    
    set key [lindex $thisLine 0]
    
    report "Debut switch : "
    report -v thisLine key
    switch -regexp  -- $key {
    
      ^NS|IS|MS|BS|ES$ {
  
        # La ligne pointée contient une nouvelle étape à extraire
     
        foreach {typeAbbrev name x y actionNumber isActive} $thisLine {
        };# endforeach
        
        set type $typeName($typeAbbrev)
        
        report "$lineIdx : ##########"
        report  "$lineIdx : Etape $type $name $x $y $actionNumber $isActive"
        
        set thisLine [lindex $graLines [incr lineIdx]]
        
        
        ################################################################
        set transAmonts [lreplace $thisLine end end]
        
        report "Transitions amont : $transAmonts "
        foreach {trans} $transAmonts {
            report    "   addLink T$trans-E$name"
        } ;# endforeach
        
        set thisLine [lindex $graLines [incr lineIdx]]
        
        ################################################################
        set transAvals [lreplace $thisLine end end]
        
        report "Transitions aval : $transAvals"
        foreach {trans} $transAvals {
            report    "   addLink E$name-T$trans"
        } ;# endforeach
        
        set thisLine [lindex $graLines [incr lineIdx]]
        
        ################################################################
        for {set actionIdx 1} {$actionIdx <= $actionNumber} {incr actionIdx} {
            
            # Chaque action éventuellement associée à cette étape est 
            # décrite par trois lignes suivantes, 
            # sinon, on a une marque de fin d'étape "##"
            
            foreach i {1 2 3} {
                set champs$i ""
                regsub "\[0-9\]+\[ \t\]*" $thisLine "" champs$i
                set thisLine [lindex $graLines [incr lineIdx]]
            }
            report  "action $actionIdx : $champs1 | $champs2 | $champs3"

        } ;# endfor
        
        # La ligne suivante DEVRAIT être une fin d'étape "##"
        if {![regexp {^##$} $thisLine ]} {
           report {ligne incorrecte : doit etre "##"}
        }
        set thisLine [lindex $graLines [incr lineIdx]]
         
        # Les lignes suivantes sont les coordonnes des actions
        for {set actionIdx 1} {$actionIdx <= $actionNumber} {incr actionIdx} {
            
            # On ignore les coordonnées des actions
            report "coordonnée d'actions : $thisLine (ignorée)"
            set thisLine [lindex $graLines [incr lineIdx]]

        } ;# endfor
        
        continue
             
      }
      
      {^##$}   {
        report "$lineIdx : ########## (## : $thisLine)"
        set thisLine [lindex $graLines [incr lineIdx]]
        continue
      }
      {^#\?}  {
        report "$lineIdx : ########## (#? : $thisLine)"
        set thisLine [lindex $graLines [incr lineIdx]]
        continue
      }
      "^\[ \]*$" {
      
        report "$lineIdx : ########## (blanc : $thisLine)"
        set thisLine [lindex $graLines [incr lineIdx]]
        continue
      }
      
      ^[0-9]+$ {
      
        report -nn "$lineIdx : ##########"
        
        
        foreach {name x y asReceptivity} $thisLine {}
        report "Transition $name ; xy : $x $y ;  $asReceptivity)"
        set thisLine [lindex $graLines [incr lineIdx]]
        
        ################################################################
        set etapesAmonts [lreplace $thisLine end end]
        
        report "Etapes amont : $etapesAmonts "
        foreach {etape} $etapesAmonts {
            report    "   addLink E$etape-T$name"
        } ;# endforeach
        set thisLine [lindex $graLines [incr lineIdx]]
        
        ################################################################
        set etapesAvales [lreplace $thisLine end end]

        report "Etapes avales : $etapesAvales "
        foreach {etape} $etapesAvales {
            report    "   addLink T$name-E$etape"
        } ;# endforeach
        set thisLine [lindex $graLines [incr lineIdx]]
        
        ################################################################
        report "réceptivité =$thisLine"
        set thisLine [lindex $graLines [incr lineIdx]]
        continue
      }
      ^#Type {
        report "$lineIdx : ########## ( debut #Type détecté)"

        # lecture de la déclaration
        # On ignore cette ligne et la suivante qui est le nombre
        # de caractère)
        set thisLine [lindex $graLines [incr lineIdx 2]]
        
        set declaration {}
        while {($lineIdx < $linesNumber) 
                && ![regexp -nocase "^#EndType" $thisLine]} {
             append declaration $thisLine\n
             set thisLine [lindex $graLines [incr lineIdx 1]]
        }
        set declaration [string trim $declaration]
        report ########
        report -v declaration
        report ########
        report "=$thisLine : debut #EndType détecté"
        set thisLine [lindex $graLines [incr lineIdx 1]]
        continue
      }
      
      default {
        set msg "ligne inconnue : $thisLine,key=$key"
        error $msg
      }
      
    }
  } ;# endwhile
  
  ######################################################################
  # construction de la commande au format gred à partir du tableau 
  # grafcet
  ######################################################################
    
} ;# endproc gred2gra

main
          
exit

